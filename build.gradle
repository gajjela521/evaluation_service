plugins {
	id 'org.springframework.boot' version '3.0.0'
	id 'io.spring.dependency-management' version '1.1.3'
	id 'java'
}

group = 'com.gajjelsa'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	all {
		resolutionStrategy {
			force 'org.junit.jupiter:junit-jupiter:5.9.1'
			force 'org.mockito:mockito-core:4.8.1'
			force 'org.mockito:mockito-junit-jupiter:4.8.1'
			force 'net.bytebuddy:byte-buddy:1.12.19'
			force 'net.bytebuddy:byte-buddy-agent:1.12.19'
			force 'org.springframework:spring-core:6.0.2'
			force 'org.springframework:spring-test:6.0.2'
		}
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
}

ext {
	set('springCloudVersion', "2022.0.0")
	set('junitVersion', "5.9.1")
	set('mockitoVersion', "4.8.1")
	set('assertjVersion', "3.23.1")
	set('jsonPathVersion', "2.9.0")
}

dependencies {
	// Spring Boot
	implementation('org.springframework.boot:spring-boot-starter-web') {
		exclude group: 'ch.qos.logback', module: 'logback-classic' // Exclude Logback
	}
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'

	// OpenAPI
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// Test Dependencies
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
	testImplementation "org.mockito:mockito-core:${mockitoVersion}"
	testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
	testImplementation "org.assertj:assertj-core:${assertjVersion}"
	testImplementation "com.jayway.jsonpath:json-path:${jsonPathVersion}"
	testImplementation 'org.hamcrest:hamcrest:2.2'
}

tasks.withType(Test).configureEach {
	useJUnitPlatform()
	testLogging {
		events 'passed', 'skipped', 'failed'
		showStandardStreams = true
	}
}

// Enable Gradle build scan
if (hasProperty('buildScan')) {
	buildScan {
		termsOfServiceUrl = 'https://gradle.com/terms-of-service'
		termsOfServiceAgree = 'yes'
	}
}

// Configure compile options
tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8'
	options.compilerArgs += ['-parameters']
}

// Ensure reproducible builds
tasks.withType(AbstractArchiveTask).configureEach {
	preserveFileTimestamps = false
	reproducibleFileOrder = true
}

plugins {
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'java'
}

group = 'com.gajjelsa'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    all {
        resolutionStrategy {
            // Force specific versions to avoid conflicts
            force 'org.junit.jupiter:junit-jupiter:5.9.1'
            force 'org.mockito:mockito-core:4.8.1'
            force 'org.mockito:mockito-junit-jupiter:4.8.1'
            force 'net.bytebuddy:byte-buddy:1.12.19'
            force 'net.bytebuddy:byte-buddy-agent:1.12.19'
            force 'org.springframework:spring-core:6.0.2'
            force 'org.springframework:spring-test:6.0.2'

            // Add caching strategy
            cacheDynamicVersionsFor 0, 'seconds'
            cacheChangingModulesFor 0, 'seconds'
        }
    }
}

repositories {
    mavenCentral()
    maven {
        url 'https://repo.spring.io/milestone'
        content {
            includeGroup 'org.springframework'
        }
    }
}

ext {
    set('springCloudVersion', "2023.0.0")
    set('junitVersion', "5.10.1")
    set('mockitoVersion', "5.7.0")
    set('assertjVersion', "3.24.2")
    set('jsonPathVersion', "2.9.0")
}

dependencies {
    // Spring Boot starters
    implementation('org.springframework.boot:spring-boot-starter-web') {
        exclude group: 'ch.qos.logback', module: 'logback-classic'
    }
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-quartz'

    // OpenAPI
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

    // Calendar and utilities
    implementation 'org.mnode.ical4j:ical4j:3.2.11'
    implementation 'org.mnode.ical4j:ical4j-extensions:1.0.5'
    implementation 'backport-util-concurrent:backport-util-concurrent:3.1'

    // Commons utilities
    implementation 'commons-codec:commons-codec:1.15'
    implementation 'commons-io:commons-io:2.11.0'

    // Logging
    implementation 'org.slf4j:slf4j-api:2.0.7'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Test Dependencies
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
    testImplementation "org.assertj:assertj-core:${assertjVersion}"
    testImplementation "com.jayway.jsonpath:json-path:${jsonPathVersion}"
    testImplementation 'org.hamcrest:hamcrest:2.2'
}

// Test configuration
tasks.withType(Test).configureEach {
    useJUnitPlatform()
    testLogging {
        events 'passed', 'skipped', 'failed'
        showStandardStreams = true
    }
    systemProperties = System.properties
}

// Build scan configuration
if (hasProperty('buildScan')) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}

// Compilation configuration
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs += ['-parameters']
    options.fork = true
    options.incremental = true
}

tasks.withType(JavaCompile) {
    options.release = 21
}

tasks.withType(Test) {
    jvmArgs = ['--enable-preview']
    systemProperty 'java.locale.providers', 'CLDR,SPI'
}


// Archive task configuration
tasks.withType(AbstractArchiveTask).configureEach {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

// Java execution configuration
tasks.withType(JavaExec).configureEach {
    jvmArgs '-Dnet.fortuna.ical4j.timezone.update.enabled=false'
    systemProperty 'net.fortuna.ical4j.parser', 'net.fortuna.ical4j.data.DefaultContentHandler'
}

// Add dependency locking
dependencyLocking {
    lockAllConfigurations()
}

// Add build info
springBoot {
    buildInfo()
}

tasks.withType(JavaExec) {
    jvmArgs += [
        '--enable-preview',
        '-Djava.locale.providers=CLDR,SPI'
    ]
}

test {
    systemProperty 'java.locale.providers', 'CLDR,SPI'
    systemProperty 'file.encoding', 'UTF-8'
    jvmArgs = ['--enable-preview']
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.gajjelsa'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springBootVersion', '3.2.0')
    set('springCloudVersion', "2023.0.0")
    set('junitVersion', "5.10.1")
    set('mockitoVersion', "5.7.0")
    set('assertjVersion', "3.24.2")
    set('jsonPathVersion', "2.9.0")
}

// Use Spring Boot's dependency management instead of manual version overrides
dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
    }
}

dependencies {
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-quartz'

    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

    implementation 'org.mnode.ical4j:ical4j:3.2.11'
    implementation 'org.mnode.ical4j:ical4j-extensions:1.0.5'
    implementation 'backport-util-concurrent:backport-util-concurrent:3.1'

    implementation 'commons-codec:commons-codec:1.15'
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'org.slf4j:slf4j-api:2.0.7'

    compileOnly 'org.projectlombok:lombok:1.18.30'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
    testImplementation "org.assertj:assertj-core:${assertjVersion}"
    testImplementation "com.jayway.jsonpath:json-path:${jsonPathVersion}"
    testImplementation 'org.hamcrest:hamcrest:2.2'
}

tasks.named('test') {
    useJUnitPlatform()
    systemProperty 'java.locale.providers', 'CLDR,SPI'
    systemProperty 'file.encoding', 'UTF-8'
    jvmArgs = ['--enable-preview']
}

tasks.withType(JavaExec).configureEach {
    jvmArgs += [
            '--enable-preview',
            '-Djava.locale.providers=CLDR,SPI'
    ]
}

configurations.testImplementation {
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
}

tasks.withType(Test) {
    useJUnitPlatform()
}

tasks.withType(JavaExec).configureEach {
    jvmArgs += [
            '--enable-preview',
            '-Djava.locale.providers=CLDR,SPI'
    ]
}